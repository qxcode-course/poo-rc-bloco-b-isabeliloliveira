{
    "patches": [
        {
            "label": "2025-10-28_11-02-56",
            "content": "@@ -930,1839 +930,245 @@\n elf.\n-__\n tip = \n-Grafite %7C None = None%0A        self.__thickness: float = 0%0A        %0A    def set_thickness(self, espessura: float):%0A        self.__thickness = espessura%0A        %0A    def get_tip(self):%0A        return self.__tip%0A    %0A    def inserir(self, grafite: Grafite):%0A        if self.__tip !=None:%0A            print(%22fail: ja existe grafite%22)%0A            return%0A        %0A        if grafite.get_thickness() != self.__thickness:%0A            print(%22fail: calibre incompativel%22)%0A            return%0A        self.__tip = grafite%0A    %0A    def remover(self) -%3E Grafite %7C None:%0A        aux = self.__tip%0A        self.__tip = None%0A        return aux%0A        %0A    def writePage(self):%0A        if self.__tip is None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        size = self.__tip.get_size()%0A        cost = self.__tip.usagePerSheet()%0A        result=size-cost%0A        %0A        if size%3C=10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A        if result%3C10:%0A            print(%22fail: folha incompleta%22)%0A            self.__tip.set_size(10)%0A            return%0A%0A        self.__tip.set_size(result)%0A        %0A    def __str__(self):%0A        grafite = self.__tip if self.__tip != None else %22null%22%0A        return f%22calibre: %7Bself.__thickeness%7D, grafite: %7Bgrafite%7D%22%0A    %0A    %0A    %0Adef main():%0A    lapiseira = Lapiseira()%0A    while True:%0A        line = input()%0A        print(%22$%22+line)%0A        args = line.split(%22 %22)%0A        if args%5B0%5D==%22end%22:%0A            break%0A        elif args%5B0%5D==%22show%22:%0A            print(lapiseira)%0A        %0A        elif args%5B0%5D==%22insert%22:%0A            thickness = args%5B1%5D%0A            hardness = args %5B2%5D%0A            size = args%5B3%5D%0A            grafite = Grafite(float(thickness), hardness, int(size))%0A        elif args %5B0%5D ==%22init%22:%0A            lapiseira.set_thickness(float(args%5B1%5D))%0A        \n+None%0A        %0A    def hasGrafite(self):%0A        if self.__size!=None:%0A            return True%0A    %0A        %0A    def __str__(self):%0A        return f%22calibre: %7Bself.__thickeness%7D, grafite: %5B%7B%7D:%7B%7D:%7B%7D%5D%22%0A    %0A    %0A    %0Adef main():%0A    %0A\n     \n",
            "lines": "55"
        },
        {
            "label": "2025-10-28_13-38-45",
            "content": "class Grafite:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__size = size\n        self.__thickness = thickness\n        self.__hardness = hardness\n    \n    def usagePerSheet(self):\n        if self.__hardness == \"HB\":\n            return 1\n        \n        elif self.__hardness == \"2B\":\n            return 2\n        \n        elif self.__hardness == \"4B\":\n            return 4\n        \n        elif self.__hardness == \"6B\":\n            return 6\n        \n        else:\n            return 0\n        \n    def get_thinckness(self):\n        return self.__thickness\n    \n    def get_hardness(self):\n        return self.__hardness\n    \n    def get_size(self):\n        return self.__size\n    \n    def set_size(self, size: int):\n        self.__size = size\n\n    def __str__(self):\n        return f\"[{self.__thickness}:{self.__hardness}:{self.__size}]\"\n    \nclass Lapiseira:\n    def __init__(self):\n        self.__tip = Grafite | None = None\n        self.__thickness: float = 0\n        \n    def set_thickness(self, espessura: float):\n        self.__thickness = espessura\n        \n    def get_tip(self):\n        return self.__tip\n    \n    def inserir(self, grafite: Grafite):\n        if self.__tip !=None:\n            print(\"fail: ja existe grafite\")\n            return\n        \n        if grafite.get_thickness() != self.__thickness:\n            print(\"fail: calibre incompativel\")\n            return\n        self.__tip = grafite\n    \n    def remover(self) -> Grafite | None:\n        aux = self.__tip\n        self.__tip = None\n        return aux\n        \n    def writePage(self):\n        if self.__tip is None:\n            print(\"fail: nao existe grafite\")\n            return\n        size = self.__tip.get_size()\n        cost = self.__tip.usagePerSheet()\n        result=size-cost\n        \n        if size<=10:\n            print(\"fail: tamanho insuficiente\")\n            return\n        if result<10:\n            print(\"fail: folha incompleta\")\n            self.__tip.set_size(10)\n            return\n\n        self.__tip.set_size(result)\n        \n    def __str__(self):\n        grafite = self.__tip if self.__tip != None else \"null\"\n        return f\"calibre: {self.__thickeness}, grafite: {grafite}\"\n    \n    \n    \ndef main():\n    lapiseira = Lapiseira()\n    while True:\n        line = input()\n        print(\"$\"+line)\n        args = line.split(\" \")\n        if args[0]==\"end\":\n            break\n        elif args[0]==\"show\":\n            print(lapiseira)\n        \n        elif args[0]==\"insert\":\n            thickness = args[1]\n            hardness = args [2]\n            size = args[3]\n            grafite = Grafite(float(thickness), hardness, int(size))\n        elif args [0] ==\"init\":\n            lapiseira.set_thickness(float(args[1]))\n            \nmain()",
            "lines": "107"
        }
    ]
}